package Client;

import Object.User;
import Database.PrivateChatManager;
import Database.UserManager;

import javax.swing.*;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.List;

public class PrivateChat extends JPanel {
    private String username;
    private JTextPane chatArea;
    private JTextField messageField;
    private JPanel userListPanel;
    private UserManager userManager;
    private PrivateChatManager privateChatManager;
    private JLabel selectedUserLabel;
    private JButton refreshUserButton;
    private JLabel lastSelectedUserLabel = null;
    public PrivateChat(String username) {
        this.username = username;
        this.userManager = new UserManager();
        this.privateChatManager = new PrivateChatManager();
        setLayout(new BorderLayout());

        // Ph√≠a b√™n tr√°i: Danh s√°ch ng∆∞·ªùi d√πng v√† n√∫t l√†m m·ªõi ng∆∞·ªùi d√πng
        userListPanel = new JPanel();
        userListPanel.setLayout(new BoxLayout(userListPanel, BoxLayout.Y_AXIS));
        userListPanel.setBackground(new Color(240, 240, 240));

        // Th√™m JLabel "Danh s√°ch ng∆∞·ªùi d√πng" ·ªü tr√™n c√πng c·ªßa userListPanel
        JLabel userListLabel = new JLabel("Danh s√°ch ng∆∞·ªùi d√πng");
        userListLabel.setFont(new Font("Arial", Font.BOLD, 14));
        userListLabel.setHorizontalAlignment(SwingConstants.CENTER);
        userListLabel.setPreferredSize(new Dimension(150, 30));
        userListPanel.add(userListLabel);

        // N√∫t l√†m m·ªõi danh s√°ch ng∆∞·ªùi d√πng
        JButton refreshButton = new JButton("L√†m m·ªõi");
        refreshButton.setPreferredSize(new Dimension(100, 30));
        refreshButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateUserList(userManager.getAllUsers());
            }
        });

        // Th√™m n√∫t l√†m m·ªõi v√†o userListPanel d∆∞·ªõi danh s√°ch ng∆∞·ªùi d√πng
        userListPanel.add(refreshButton);

        // Th√™m c√°c ng∆∞·ªùi d√πng v√†o danh s√°ch
        JScrollPane userScroll = new JScrollPane(userListPanel);
        userScroll.setPreferredSize(new Dimension(150, 0));
        add(userScroll, BorderLayout.WEST);

        // Ph√≠a b√™n ph·∫£i: Khung chat
        JPanel chatPanel = new JPanel();
        chatPanel.setLayout(new BorderLayout());

        // T√™n ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªçn
        selectedUserLabel = new JLabel("Chat v·ªõi: [T√™n ng∆∞·ªùi d√πng]");
        selectedUserLabel.setFont(new Font("Arial", Font.BOLD, 14));
        selectedUserLabel.setHorizontalAlignment(SwingConstants.CENTER);
        chatPanel.add(selectedUserLabel, BorderLayout.NORTH);

        // L·ªãch s·ª≠ chat
        chatArea = new JTextPane();
        chatArea.setEditable(false);
        chatArea.setFont(new Font("Arial", Font.PLAIN, 14));
        JScrollPane chatScroll = new JScrollPane(chatArea);
        chatPanel.add(chatScroll, BorderLayout.CENTER);

        // Ph√≠a d∆∞·ªõi: Khung nh·∫≠p v√† c√°c n√∫t
        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new BorderLayout());

        // C√°c n√∫t g·ª≠i v√† c√°c icon
        ImageIcon originalIcon = new ImageIcon(getClass().getResource("/Icon/clip.png"));
        Image resizedImage = originalIcon.getImage().getScaledInstance(30, 30, Image.SCALE_SMOOTH);
        ImageIcon resizedIcon = new ImageIcon(resizedImage);
        JButton sendFileButton = new JButton(resizedIcon);
        sendFileButton.setPreferredSize(new Dimension(40, 40));
        sendFileButton.setToolTipText("G·ª≠i File");

        ImageIcon originalEmojiIcon = new ImageIcon(getClass().getResource("/Icon/emoji.png"));
        Image resizedEmojiImage = originalEmojiIcon.getImage().getScaledInstance(30, 30, Image.SCALE_SMOOTH);
        ImageIcon resizedEmojiIcon = new ImageIcon(resizedEmojiImage);
        JButton emojiButton = new JButton(resizedEmojiIcon);
        emojiButton.setPreferredSize(new Dimension(40, 40));
        emojiButton.setToolTipText("Ch·ªçn Emoji");

        ImageIcon originalSendIcon = new ImageIcon(getClass().getResource("/Icon/send_mess.png"));
        Image resizedSendImage = originalSendIcon.getImage().getScaledInstance(30, 30, Image.SCALE_SMOOTH);
        ImageIcon resizedSendIcon = new ImageIcon(resizedSendImage);
        JButton sendButton = new JButton(resizedSendIcon);
        sendButton.setPreferredSize(new Dimension(40, 40));
        sendButton.setToolTipText("G·ª≠i Tin Nh·∫Øn");

        // T·∫°o JPanel cho c√°c n√∫t
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
        buttonPanel.add(sendFileButton);
        buttonPanel.add(emojiButton);
        buttonPanel.add(sendButton);

        // Tr∆∞·ªùng nh·∫≠p vƒÉn b·∫£n
        messageField = new JTextField();
        messageField.setPreferredSize(new Dimension(300, 30));
        Font font = new Font("Arial", Font.PLAIN, 16);
        messageField.setFont(font);

        // Th√™m c√°c th√†nh ph·∫ßn v√†o inputPanel
        inputPanel.add(buttonPanel, BorderLayout.WEST);
        inputPanel.add(messageField, BorderLayout.CENTER);

        chatPanel.add(inputPanel, BorderLayout.SOUTH);

        add(chatPanel, BorderLayout.CENTER);

        // S·ª± ki·ªán cho n√∫t g·ª≠i tin nh·∫Øn
        sendButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sendMessage();
            }
        });

        // S·ª± ki·ªán cho n√∫t g·ª≠i file
        sendFileButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sendFile();
            }
        });

        // S·ª± ki·ªán cho n√∫t g·ª≠i emoji
        emojiButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sendEmoji();
            }
        });

        // C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi d√πng ban ƒë·∫ßu
        updateUserList(userManager.getAllUsers());
    }

    // H√†m g·ª≠i tin nh·∫Øn
    private void sendMessage() {
        String message = messageField.getText();
        if (message != null && !message.trim().isEmpty()) {
            String selectedUser = selectedUserLabel.getText().replace("Chat v·ªõi: ", "");
            if (privateChatManager.sendMessage(username, selectedUser, message, "", false)) {
                appendMessage("B·∫°n: " + message, Color.PINK); // M√†u h·ªìng cho ng∆∞·ªùi g·ª≠i
                displayChatHistory(selectedUser); // C·∫≠p nh·∫≠t l·∫°i l·ªãch s·ª≠ chat sau khi g·ª≠i tin nh·∫Øn
            }
            messageField.setText("");
        }
    }

    // H√†m g·ª≠i file
// H√†m g·ª≠i file
    private void sendFile() {
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            String selectedUser = selectedUserLabel.getText().replace("Chat v·ªõi: ", "");
            String filePath = file.getAbsolutePath();

            // Hi·ªÉn th·ªã ti·∫øn tr√¨nh g·ª≠i file
            SwingWorker<Void, Void> fileSendWorker = new SwingWorker<>() {
                @Override
                protected Void doInBackground() throws Exception {
                    String message = "ƒê√£ g·ª≠i file: " + file.getName();
                    if (privateChatManager.sendMessage(username, selectedUser, message, filePath, false)) {
                        appendMessage("B·∫°n ƒë√£ g·ª≠i file: " + file.getName(), Color.PINK);
                        displayChatHistory(selectedUser);
                    }
                    return null;
                }

                @Override
                protected void done() {
                    JOptionPane.showMessageDialog(null, "G·ª≠i file th√†nh c√¥ng!");
                }
            };
            fileSendWorker.execute();
        }
    }

    // H√†m g·ª≠i emoji
    private void sendEmoji() {
        // T·∫°o danh s√°ch emoji
        String[] emojis = {"üòä", "üòÇ", "üòç", "üëç", "‚ù§Ô∏è", "üò¢"};
        String selectedEmoji = (String) JOptionPane.showInputDialog(
                this,
                "Ch·ªçn m·ªôt emoji:",
                "G·ª≠i Emoji",
                JOptionPane.PLAIN_MESSAGE,
                null,
                emojis,
                emojis[0]
        );

        if (selectedEmoji != null) {
            String selectedUser = selectedUserLabel.getText().replace("Chat v·ªõi: ", "");
            // G·ª≠i emoji nh∆∞ tin nh·∫Øn
            if (privateChatManager.sendMessage(username, selectedUser, selectedEmoji, null, true)) {
                appendMessage(username + " ƒë√£ g·ª≠i emoji: " + selectedEmoji, Color.YELLOW);
                displayChatHistory(selectedUser);
            }
        }
    }

    // H√†m nh·∫≠n tin nh·∫Øn
    public void receiveMessage(String message) {
        if (message != null && !message.trim().isEmpty()) {
            if (message.startsWith("ƒê√£ g·ª≠i file: ")) {
                String fileName = message.replace("ƒê√£ g·ª≠i file: ", "");
                appendFileMessage("Ng∆∞·ªùi kh√°c ƒë√£ g·ª≠i file: " + fileName, Color.BLUE);
            } else if (message.startsWith("Emoji: ")) {
                String emoji = message.replace("Emoji: ", "");
                appendMessage("Ng∆∞·ªùi kh√°c ƒë√£ g·ª≠i emoji: " + emoji, Color.BLUE);
            } else {
                appendMessage("Ng∆∞·ªùi kh√°c: " + message, Color.BLUE);
            }
            String selectedUser = selectedUserLabel.getText().replace("Chat v·ªõi: ", "");
            displayChatHistory(selectedUser);
        }
    }

    // H√†m th√™m li√™n k·∫øt file v√†o JTextPane
    private void appendFileMessage(String message, Color color) {
        StyledDocument doc = chatArea.getStyledDocument();
        Style style = chatArea.addStyle("Style", null);
        StyleConstants.setForeground(style, color);
        try {
            doc.insertString(doc.getLength(), message + " ", style);
            JButton openFileButton = new JButton("M·ªü file");
            openFileButton.setForeground(Color.BLUE);
            openFileButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
            openFileButton.addActionListener(e -> {
                String filePath = message.replace("Ng∆∞·ªùi kh√°c ƒë√£ g·ª≠i file: ", "").trim();
                openFile(filePath);
            });
            chatArea.insertComponent(openFileButton);
            doc.insertString(doc.getLength(), "\n", null); // Xu·ªëng d√≤ng sau n√∫t
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // H√†m m·ªü file
    private void openFile(String filePath) {
        try {
            File file = new File(filePath);
            if (file.exists()) {
                Desktop.getDesktop().open(file);
            } else {
                JOptionPane.showMessageDialog(null, "File kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng th·ªÉ m·ªü!");
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "C√≥ l·ªói x·∫£y ra khi m·ªü file!");
            e.printStackTrace();
        }
    }

    // H√†m th√™m tin nh·∫Øn v√†o JTextPane v·ªõi m√†u s·∫Øc
    private void appendMessage(String message, Color color) {
        StyledDocument doc = chatArea.getStyledDocument();
        Style style = chatArea.addStyle("Style", null);
        StyleConstants.setForeground(style, color);
        try {
            doc.insertString(doc.getLength(), message + "\n", style);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // C·∫≠p nh·∫≠t l·ªãch s·ª≠ chat khi ng∆∞·ªùi d√πng ch·ªçn ng∆∞·ªùi kh√°c ƒë·ªÉ chat
    private void displayChatHistory(String selectedUser) {
        List<String> chatHistory = privateChatManager.getChatHistory(username, selectedUser);
        chatArea.setText(""); // X√≥a n·ªôi dung c≈© trong chatArea
        for (String message : chatHistory) {
            appendMessage(message, Color.BLACK); // Hi·ªÉn th·ªã c√°c tin nh·∫Øn trong l·ªãch s·ª≠
        }
    }

    // C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi d√πng trong giao di·ªán
    private void updateUserList(List<User> users) {
        userListPanel.removeAll();

        // Th√™m l·∫°i JLabel "Danh s√°ch ng∆∞·ªùi d√πng"
        JLabel userListLabel = new JLabel("Danh s√°ch ng∆∞·ªùi d√πng");
        userListLabel.setFont(new Font("Arial", Font.BOLD, 14));
        userListLabel.setHorizontalAlignment(SwingConstants.CENTER);
        userListLabel.setPreferredSize(new Dimension(150, 30));
        userListPanel.add(userListLabel);

        // Th√™m c√°c ng∆∞·ªùi d√πng v√†o danh s√°ch, lo·∫°i tr·ª´ ng∆∞·ªùi d√πng hi·ªán t·∫°i
        for (User user : users) {
            if (!user.getUsername().equals(username)) {
                JLabel userLabel = new JLabel(user.getUsername());
                userLabel.setFont(new Font("Arial", Font.PLAIN, 14));
                userLabel.setPreferredSize(new Dimension(150, 30));
                userLabel.setHorizontalAlignment(SwingConstants.CENTER);

                userLabel.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        // Hi·ªÉn th·ªã ng∆∞·ªùi d√πng ƒë√£ ch·ªçn
                        selectedUserLabel.setText("Chat v·ªõi: " + user.getUsername());
                        displayChatHistory(user.getUsername());

                        // ƒê·ªïi font c·ªßa t√™n ng∆∞·ªùi d√πng th√†nh in ƒë·∫≠m khi ch·ªçn
                        if (lastSelectedUserLabel != null) {
                            // ƒê·∫∑t l·∫°i font c·ªßa ng∆∞·ªùi d√πng tr∆∞·ªõc ƒë√≥ v·ªÅ b√¨nh th∆∞·ªùng
                            lastSelectedUserLabel.setFont(new Font("Arial", Font.PLAIN, 14));
                        }

                        // ƒê·∫∑t font c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i th√†nh in ƒë·∫≠m
                        userLabel.setFont(new Font("Arial", Font.BOLD, 14));

                        // C·∫≠p nh·∫≠t l·∫°i ng∆∞·ªùi d√πng ƒë√£ ch·ªçn
                        lastSelectedUserLabel = userLabel;
                    }
                });

                userListPanel.add(userLabel);
            }
        }

        // C·∫≠p nh·∫≠t l·∫°i giao di·ªán
        userListPanel.revalidate();
        userListPanel.repaint();
    }

}
